class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
        ArrayList<ArrayList<Integer>>ans=new ArrayList<>();
        int[] nums=new int[n];
        int index=0;
        for(int el : arr){
            nums[index++]=el;
        }
        findPermutationsSwapping(0,nums,ans);
        Collections.sort(ans,(a,b)->{
            for(int i=0;i<a.size();i++){
                if(a.get(i)!=b.get(i)) return a.get(i)-b.get(i);
            }
            return 0;
        });
        return ans;
    }
    static void findPermutationsSwapping(int index,int[] nums,ArrayList<ArrayList<Integer>>ans){
        if(index==nums.length){
            ArrayList<Integer>curr=new ArrayList<>();
            for(int el:nums){
                curr.add(el);
            }
            ans.add(new ArrayList<>(curr));
            return;
        }
        Set<Integer> seen = new HashSet<>();
    for (int i = index; i < nums.length; i++) {
        if (seen.add(nums[i])) {
            swap(nums, index, i);
            findPermutationsSwapping(index + 1, nums, ans);
            swap(nums, index, i); // Backtrack
        }
    }
    }
    static void swap(int[] nums,int i,int index){
        int temp=nums[i];
        nums[i]=nums[index];
        nums[index]=temp;
    }
};