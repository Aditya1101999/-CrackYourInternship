class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>>ans=new ArrayList<>();
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';//initialize with empty square 
            }
        }
        placeQueens(0,ans,board);
        return ans;
    }
    private void placeQueens(int row,List<List<String>> ans,char[][] board){
        if(row==board.length){
            ans.add(build(board));
            return;
        }
        for(int col=0;col<board.length;col++){
            if(isValid(board,row,col)){
                board[row][col]='Q';
                placeQueens(row+1,ans,board);
                board[row][col]='.';
            }
        }
    }
    private boolean isValid(char[][] board,int row,int col){
        for(int i=row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        for(int i=row-1,j=col-1;i>=0 && j>=0;i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i=row-1,j=col+1;i>=0 && j<board.length;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
    private List<String> build(char[][] board){
        List<String>curr=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            curr.add(new String(board[i]));
        }
        return curr;
    }
}