class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>>ans=new ArrayList<>();
        findPermutationsSwapping(0,nums,ans);
        return ans;
    }
    private void findPermutationsSwapping(int index,int[] nums,List<List<Integer>>ans){
        if(index==nums.length){
            ArrayList<Integer>curr=new ArrayList<>();
            for(int el:nums){
                curr.add(el);
            }
            ans.add(new ArrayList<>(curr));
            return;
        }
        for(int i=index;i<nums.length;i++){
            if(i>index && isDuplicate(i,index,nums)) continue;
            swap(i,index,nums);
            findPermutationsSwapping(index+1,nums,ans);//putting every element at each index
            swap(i,index,nums);//backtrack
        }
    }
    private void swap(int i,int index,int[] nums){
        int temp=nums[i];
        nums[i]=nums[index];
        nums[index]=temp;
    }
    private boolean isDuplicate(int i,int index,int[] nums){
        for(int j=index;j<i;j++){
            if(nums[j]==nums[i]) return true;//appeared before 
        }
        return false;
    }
}