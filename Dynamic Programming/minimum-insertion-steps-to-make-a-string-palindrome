package Dynamic Programming;

class Solution {
    public int minInsertions(String s) {
        return s.length()-longestPalindrome(s);
    }
    private int longestPalindrome(String s1){
        int n=s1.length();
        String s2=new StringBuilder(s1).reverse().toString();
        int[][] dp=new int[n+1][n+1];
        for(int[] row : dp){
            Arrays.fill(row,-1);
        }
        return lcs(s1,s2,n,n,dp);
    }
    private int lcs(String s1,String s2,int m,int n,int[][] dp){
        if(m==0 || n==0) return 0;
        
        if(dp[m][n]!=-1) return dp[m][n];
        
        if(s1.charAt(m-1)==s2.charAt(n-1)){
            return dp[m][n]=1+lcs(s1,s2,m-1,n-1,dp);
        }
        return dp[m][n]=Math.max(lcs(s1,s2,m-1,n,dp),lcs(s1,s2,m,n-1,dp));
    }
}