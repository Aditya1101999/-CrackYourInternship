class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        int n = equations.size();

        Map<String, List<Pair<String, Double>>> adj = new HashMap<>();

        for (int i = 0; i < n; i++) {
            String u = equations.get(i).get(0);
            String v = equations.get(i).get(1);
            double val = values[i];

            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(new Pair<>(v, val));      
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(new Pair<>(u, 1.0 / val)); 
        }
        double[] result = new double[queries.size()];

        for (int i = 0; i < queries.size(); i++) {
            String src = queries.get(i).get(0);
            String dst = queries.get(i).get(1);

            double[] ans = {-1.0};
            double product = 1.0;

            if (adj.containsKey(src) && adj.containsKey(dst)) {
                Set<String> visited = new HashSet<>();
                dfs(adj, src, dst, visited, product, ans);
            }

            result[i] = ans[0];
        }

        return result;
    }
    private void dfs(Map<String, List<Pair<String, Double>>> adj, String src, String dst, Set<String> visited, double product, double[] ans) {
        visited.add(src);
        
        if(src.equals(dst)){
            ans[0]=product;
            return;
        }
        for(Pair<String,Double>it : adj.get(src)){
            String v=it.getKey();
            double val=it.getValue();
            if(!visited.contains(v)){
                dfs(adj,v,dst,visited,product*val,ans);
            }
        }
    }

}