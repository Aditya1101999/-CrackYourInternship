class Solution {
    class DSU{
        int[] rank;
        int[] parent;
        public DSU(int n){
            rank=new int[n];
            parent=new int[n];
            for(int i=0;i<n;i++){
                parent[i]=i;
            }
        }
        public int findPar(int u){
            if(parent[u]==u) return u;
            parent[u]=findPar(parent[u]);
            return parent[u];
        }
        public boolean union(int u,int v){
            int uPar=findPar(u);
            int vPar=findPar(v);
            if(uPar==vPar) return false;
            if(rank[uPar]>rank[vPar]){
                parent[vPar]=uPar;
            }
            else if(rank[vPar]>rank[uPar]){
                parent[uPar]=vPar;
            }
            else{
                parent[uPar]=vPar;
                rank[vPar]++;
            }
            return true;
        }
    }
    public int makeConnected(int n, int[][] connections) {
        DSU dsu=new DSU(n);
        int extraEdges=0;
        for(int[] connection : connections){
            int u=connection[0];
            int v=connection[1];
            if(!dsu.union(u,v)){//parents are same
                extraEdges++;
            }
        }
        int components=0;
        for(int i=0;i<n;i++){
            if(dsu.parent[i]==i) components++;
        }
        int required=components-1;
        return extraEdges>=required ? required : -1;
    }
}