class Solution {
    public int shortestBridge(int[][] grid) {
        int n=grid.length;
        Set<String>visited=new HashSet<>();
        Queue<int[]>q=new LinkedList<>();
        boolean flag=false;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){//island one found
                    dfs(grid,i,j,visited,q);
                    flag=true;
                    break;
                }
            }
            if(flag) break;
        }
        int level=0;
        int[] delRow={-1,0,1,0};
        int[] delCol={0,1,0,-1};
        while(!q.isEmpty()){
            int size=q.size();
            for(int j=0;j<size;j++){
                int row=q.peek()[0];
                int col=q.peek()[1];
                q.poll();
                for(int i=0;i<4;i++){
                    int nrow=row+delRow[i];
                    int ncol=col+delCol[i];
                    String coord = nrow + "," + ncol;
                    if(nrow>=0 && ncol>=0 && nrow<n && ncol<n && !visited.contains(coord)){
                        if(grid[nrow][ncol]==1) return level;
                        visited.add(coord);
                        q.add(new int[]{nrow,ncol});
                    }
                }
            }
            level++;
        }
        return -1;
    }
    private void dfs(int[][] grid,int row,int col,Set<String>visited,Queue<int[]>q){
        String coord = row + "," + col;
        visited.add(coord);
        q.add(new int[]{row,col});
        int[] delRow={-1,0,1,0};
        int[] delCol={0,1,0,-1};
        for(int i=0;i<4;i++){
            int nrow=row+delRow[i];
            int ncol=col+delCol[i];
            String newCoord = nrow + "," + ncol;
            if(nrow>=0 && ncol>=0 && nrow<grid.length && ncol<grid.length && grid[nrow][ncol]==1 && !visited.contains(newCoord)){
                dfs(grid,nrow,ncol,visited,q);
            }
        }
    }
}