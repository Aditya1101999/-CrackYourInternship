package Graph;

class Solution{
    private static void dfs(int i,boolean[] visited,Stack<Integer>st,ArrayList<ArrayList<Integer>>adj){
        visited[i]=true;
        for(int node:adj.get(i)){
            if(!visited[node]){
                dfs(node,visited,st,adj);
            }
        }
        st.push(i);
    }
    //Function to return list containing vertices in Topological order. 
    public static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited=new boolean[V];
        Stack<Integer>st=new Stack<>();
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,visited,st,adj);
            }
        }
        int[] ans=new int[V];
        int i=0;
        while(!st.isEmpty()){
            ans[i++]=st.pop();
        }
        return ans;
    }
}