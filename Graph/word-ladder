package Graph;

class Solution {
    class Pair{
        String word;
        int level;
        public Pair(String word,int level){
            this.word=word;
            this.level=level;
        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String>set=new HashSet<>(wordList);
        Queue<Pair>q=new LinkedList<>();
        q.add(new Pair(beginWord,1));
       if(set.contains(beginWord)) set.remove(beginWord);
        
        while(!q.isEmpty()){
            String currWord=q.peek().word;
            int currLevel=q.peek().level;
            q.remove();
            
            if(currWord.equals(endWord)) return currLevel;
                
            for(int i=0;i<currWord.length();i++){
                for(char ch='a';ch<='z';ch++){
                    char[] replacedWordArray=currWord.toCharArray();
                    replacedWordArray[i]=ch;
                    String newStr=new String(replacedWordArray);
                    if(set.contains(newStr)){
                        set.remove(newStr);
                        q.add(new Pair(newStr,currLevel+1));
                    }
                }
            }
        }
        return 0;
    }
}