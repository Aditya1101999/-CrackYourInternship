class Solution {
    public int[] restoreArray(int[][] adjacentPairs) {
        Map<Integer,List<Integer>>graph=new HashMap<>();
        for(int[] pair : adjacentPairs){
            graph.computeIfAbsent(pair[0], k -> new ArrayList<>()).add(pair[1]);
            graph.computeIfAbsent(pair[1], k -> new ArrayList<>()).add(pair[0]);
        }
        int start=-1;
        for(int node : graph.keySet()){
            if(graph.get(node).size()==1){
                start=node;
                break;
            } 
        }
       int[] ans=new int[graph.size()];
        dfs(graph,start,-1,ans,0);
        return ans;
    }
    private void dfs(Map<Integer,List<Integer>>graph,int start,int prev,int[] ans,int index){
        ans[index]=start;
        
        for(int node : graph.get(start)){
            if(node!=prev){
                dfs(graph,node,start,ans,index+1);
            }
        }
    }
}