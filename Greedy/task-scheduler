class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] freq=new int[26];
        for(char c : tasks){
            freq[c-'A']++;
        }
        //frequency , time
        PriorityQueue<Pair<Integer,Integer>>pq=new PriorityQueue<>((a,b)->b.getKey()-a.getKey());
        for(int el : freq){
            if(el>0) pq.add(new Pair(el,0));
        }
        int time=0;
        Queue<Pair<Integer,Integer>>q=new LinkedList<>();//frequency , time
        while(!pq.isEmpty() || !q.isEmpty()){
            time++;
            if(!pq.isEmpty()){
                Pair<Integer,Integer> task=pq.poll();
                int frequency=task.getKey();
                frequency--;
                if(frequency>0) q.add(new Pair(frequency,time+n));
            }
            if(!q.isEmpty() && q.peek().getValue()==time) pq.add(q.poll()); 
        }
        return time;
    }
}