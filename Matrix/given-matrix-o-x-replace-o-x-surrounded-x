class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        boolean[][] visited=new boolean[n][m];
        for(int i=0;i<n;i++){
            if(a[i][0]=='O') dfs(a,visited,i,0);
            if(a[i][m-1]=='O') dfs(a,visited,i,m-1);
        }
        for(int j=0;j<m;j++){
            if(a[0][j]=='O') dfs(a,visited,0,j);
            if(a[n-1][j]=='O') dfs(a,visited,n-1,j);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(a[i][j]=='O' && !visited[i][j]) a[i][j]='X';
            }
        }
        return a;
    }
    static void dfs(char[][] a,boolean[][] visited,int row,int col){
        visited[row][col]=true;
        int[] delRow={0,-1,0,1};
        int[] delCol={1,0,-1,0};
        for(int i=0;i<4;i++){
            int nrow=row+delRow[i];
            int ncol=col+delCol[i];
            if(nrow>=0 && ncol>=0 && nrow<a.length && ncol<a[0].length &&
            a[nrow][ncol]=='O' && !visited[nrow][ncol]){
                dfs(a,visited,nrow,ncol);
            }
        }
    }
    
}