class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        int n=grid.length;
        int m=grid[0].length;
        Queue<int[]>q=new LinkedList<>();
        boolean[][] visited=new boolean[n][m];
        int fresh=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1) fresh++;
                else if(grid[i][j]==2){
                    q.add(new int[]{i,j,0});
                }
            }
        }
        int[] delRow={-1,0,1,0};
        int[] delCol={0,-1,0,1};
        int time=0;
        while(!q.isEmpty()){
            int row=q.peek()[0];
            int col=q.peek()[1];
            int currTime=q.peek()[2];
            q.poll();
            time=Math.max(time,currTime);
            for(int i=0;i<4;i++){
                int nrow=row+delRow[i];
                int ncol=col+delCol[i];
                if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && !visited[nrow][ncol]
                && grid[nrow][ncol]==1){
                    visited[nrow][ncol]=true;
                    fresh--;
                    q.add(new int[]{nrow,ncol,currTime+1});
                }
            }
        }
        return fresh==0 ? time : -1;
    }
}