class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode>parent=getParent(root);
        Queue<TreeNode>q=new LinkedList<>();
        List<Integer>ans=new ArrayList<>();
        Set<Integer>visited=new HashSet<>();
        q.add(target);
        visited.add(target.val);
        int level=0;
        while(!q.isEmpty()){
            if(level==k) break;
            int size=q.size();
            while(size-->0){
                TreeNode curr=q.poll();
                if(curr.left!=null && !visited.contains(curr.left.val)){
                    q.add(curr.left);
                    visited.add(curr.left.val);
                }
                if(curr.right!=null && !visited.contains(curr.right.val)){
                    q.add(curr.right);
                    visited.add(curr.right.val);
                }
                if(parent.containsKey(curr) && !visited.contains(parent.get(curr).val)){
                    q.add(parent.get(curr));
                    visited.add(parent.get(curr).val);
                }
            }
            level++;
        }
        while(!q.isEmpty()){
            ans.add(q.poll().val);
        }
        return ans;
    }
    private Map<TreeNode,TreeNode> getParent(TreeNode root){
        Map<TreeNode,TreeNode>map=new HashMap<>();
        Queue<TreeNode>q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode curr=q.poll();
            if(curr.left!=null){
                map.put(curr.left,curr);
                q.add(curr.left);
            }
            if(curr.right!=null){
                map.put(curr.right,curr);
                q.add(curr.right);
            }
        }
        return map;
    }
}