class Solution {
    class Pair{
        TreeNode node;
        int index;
        public Pair(TreeNode node,int index){
            this.node=node;
            this.index=index;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        int ans=0;
        Queue<Pair>q=new LinkedList<>();
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            int size=q.size();
            int minIndex=q.peek().index;
            int first=0;
            int last=0;
            for(int i=0;i<size;i++){
                int currIndex=q.peek().index-minIndex;
                TreeNode curr=q.peek().node;
                q.remove();
                if(i==0) first=currIndex;
                if(i==size-1) last=currIndex;
                //indexing like segment trees
                if(curr.left!=null){
                    q.add(new Pair(curr.left,2*currIndex+1));
                }
                if(curr.right!=null){
                    q.add(new Pair(curr.right,2*currIndex+2));
                }
                
            }
            ans=Math.max(ans,last-first+1);
        }
        return ans;
    }
}