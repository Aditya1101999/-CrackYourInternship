/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null){
            return "";
        }
        Queue<TreeNode>q=new LinkedList<>();
        StringBuilder res=new StringBuilder();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode curr=q.remove();
            if(curr==null){
                res.append("n ");
                continue;
            }
            res.append(curr.val+" ");
            q.add(curr.left);
            q.add(curr.right);
        }
        return res.toString();
    }
    

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data=="") return null;
        Queue<TreeNode>q=new LinkedList<>();
        String[] values=data.split(" ");
        TreeNode root=new TreeNode(Integer.parseInt(values[0]));
        q.add(root);
        for(int i=1;i<values.length;i++){
            TreeNode curr=q.remove();
            if(!values[i].equals("n")){//left
                TreeNode left=new TreeNode(Integer.parseInt(values[i]));
                curr.left=left;
                q.add(left);
            }
            if(!values[++i].equals("n")){//right
                TreeNode right=new TreeNode(Integer.parseInt(values[i]));
                curr.right=right;
                q.add(right);
            }
        }
        return root;
    }
}